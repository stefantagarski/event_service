name: EventService CI/CD
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run tests
        run: |
          # Add your test commands here
          # docker-compose -f docker-compose.test.yml run --rm test
          echo "Running tests..."

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      image-tag: ${{ env.IMAGE_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up environment variables
        run: |
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV
      - name: Build backend Docker image
        run: |
          cd backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/event-backend:latest .
          docker tag ${{ secrets.DOCKER_USERNAME }}/event-backend:latest ${{ secrets.DOCKER_USERNAME }}/event-backend:${{ github.sha }}
      - name: Build frontend Docker image
        run: |
          cd frontend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/event-frontend:latest .
          docker tag ${{ secrets.DOCKER_USERNAME }}/event-frontend:latest ${{ secrets.DOCKER_USERNAME }}/event-frontend:${{ github.sha }}
      - name: Push Docker images
        run: |
          # Push backend images
          docker push ${{ secrets.DOCKER_USERNAME }}/event-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/event-backend:${{ github.sha }}
          
          # Push frontend images
          docker push ${{ secrets.DOCKER_USERNAME }}/event-frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/event-frontend:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          timeout: 300s
          script: |
            # Update system packages
            sudo yum update -y || sudo apt update -y
            
            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              # For Amazon Linux
              sudo yum install -y docker || sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi
            
            # Install Docker Compose if not installed
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Create app directory
            mkdir -p ~/app
            cd ~/app
            
            # Create docker-compose.yml file
            cat > docker-compose.yml << 'EOF'
            version: '3.8'
            services:
              mongodb:
                image: mongo:7.0
                container_name: mongodb
                ports:
                  - "27017:27017"
                environment:
                  - MONGO_INITDB_ROOT_USERNAME=admin
                  - MONGO_INITDB_ROOT_PASSWORD=password123
                volumes:
                  - mongodb_data:/data/db
                restart: unless-stopped
                networks:
                  - app-network
                
              backend:
                image: ${{ secrets.DOCKER_USERNAME }}/event-backend:latest
                container_name: flask-backend
                ports:
                  - "5000:5000"  # Flask default port
                environment:
                  - FLASK_ENV=production
                  - MONGODB_URI=mongodb://admin:password123@mongodb:27017/
                depends_on:
                  - mongodb
                restart: unless-stopped
                networks:
                  - app-network
                
              frontend:
                image: ${{ secrets.DOCKER_USERNAME }}/event-frontend:latest
                container_name: streamlit-frontend
                ports:
                  - "8501:8501"  # Streamlit default port
                  - "80:8501"    # Also expose on port 80 for easier access
                environment:
                  - BACKEND_URL=http://backend:5000
                depends_on:
                  - backend
                restart: unless-stopped
                networks:
                  - app-network
                  
            volumes:
              mongodb_data:
                
            networks:
              app-network:
                driver: bridge
            EOF
            
            # Stop and remove existing containers
            docker-compose down || true
            
            # Pull latest images
            docker pull mongo:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/event-backend:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/event-frontend:latest
            
            # Start the application
            docker-compose up -d
            
            # Clean up old images
            docker image prune -f
            
            # Show running containers for verification
            docker ps
