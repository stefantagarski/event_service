name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

env:
  BACKEND_IMAGE_NAME: stefantagarski/event-backend
  FRONTEND_IMAGE_NAME: stefantagarski/event-frontend

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest
    outputs:
      backend-tag: ${{ steps.meta.outputs.backend-tag }}
      frontend-tag: ${{ steps.meta.outputs.frontend-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          logout: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate image tags
        id: meta
        run: |
          if [[ $GITHUB_REF == "refs/heads/main" ]]; then
            BACKEND_TAG="${{ env.BACKEND_IMAGE_NAME }}:latest"
            FRONTEND_TAG="${{ env.FRONTEND_IMAGE_NAME }}:latest"
          else
            BACKEND_TAG="${{ env.BACKEND_IMAGE_NAME }}:develop"
            FRONTEND_TAG="${{ env.FRONTEND_IMAGE_NAME }}:develop"
          fi
          echo "backend-tag=${BACKEND_TAG}" >> $GITHUB_OUTPUT
          echo "frontend-tag=${FRONTEND_TAG}" >> $GITHUB_OUTPUT

      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.backend-tag }}
          platforms: linux/amd64

      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.frontend-tag }}
          platforms: linux/amd64

  deploy-to-ec2:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Setup SSH access
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Add EC2 to known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Create minimal deploy.sh
        run: |
          cat > deploy.sh <<EOF
          #!/bin/bash
          set -e

          echo "ðŸ“¦ Pulling Docker images..."
          docker pull ${{ needs.docker-build-and-push.outputs.backend-tag }}
          docker pull ${{ needs.docker-build-and-push.outputs.frontend-tag }}

          echo "ðŸ›‘ Stopping old containers (if any)..."
          docker-compose -f ~/event-app/docker-compose.yml down || true

          echo "ðŸš€ Starting new containers..."
          cd ~/event-app
          docker-compose up -d

          echo "âœ… Deployment complete!"
          docker ps
          EOF

      - name: Copy deploy script to EC2
        run: scp deploy.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/deploy.sh

      - name: Execute deploy script on EC2
        run: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "bash /home/${{ secrets.EC2_USER }}/deploy.sh"
