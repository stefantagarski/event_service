name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

env:
  BACKEND_IMAGE_NAME: stefantagarski/event-backend
  FRONTEND_IMAGE_NAME: stefantagarski/event-frontend

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest
    outputs:
      backend-tag: ${{ steps.meta.outputs.backend-tag }}
      frontend-tag: ${{ steps.meta.outputs.frontend-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          logout: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate image tags
        id: meta
        run: |
          if [[ $GITHUB_REF == "refs/heads/main" ]]; then
            BACKEND_TAG="${{ env.BACKEND_IMAGE_NAME }}:latest"
            FRONTEND_TAG="${{ env.FRONTEND_IMAGE_NAME }}:latest"
          else
            BACKEND_TAG="${{ env.BACKEND_IMAGE_NAME }}:develop"
            FRONTEND_TAG="${{ env.FRONTEND_IMAGE_NAME }}:develop"
          fi
          echo "backend-tag=${BACKEND_TAG}" >> $GITHUB_OUTPUT
          echo "frontend-tag=${FRONTEND_TAG}" >> $GITHUB_OUTPUT

      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.backend-tag }}
          platforms: linux/amd64

      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.frontend-tag }}
          platforms: linux/amd64

  deploy-to-ec2:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Setup SSH access
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Add EC2 to known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment script
        run: |
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          BACKEND_IMAGE=${{ needs.docker-build-and-push.outputs.backend-tag }}
          FRONTEND_IMAGE=${{ needs.docker-build-and-push.outputs.frontend-tag }}

          echo "📦 Pulling Docker images from Docker Hub..."
          docker pull $BACKEND_IMAGE
          docker pull $FRONTEND_IMAGE

          echo "🛑 Stopping existing containers..."
          docker-compose -f ~/event-app/docker-compose.yml down || true

          echo "📝 Creating Docker Compose file..."
          cat > ~/event-app/docker-compose.yml << COMPOSE
          version: '3.8'
          services:
            mongodb:
              image: mongo:latest
              container_name: event_mongodb
              restart: unless-stopped
              ports:
                - "27017:27017"
              environment:
                MONGO_INITDB_ROOT_USERNAME: admin
                MONGO_INITDB_ROOT_PASSWORD: \${MONGO_ROOT_PASSWORD}
                MONGO_INITDB_DATABASE: eventdb
              volumes:
                - mongodb_data:/data/db
              networks:
                - event_network
              healthcheck:
                test: echo 'db.runCommand("ping").ok' | mongosh --quiet
                interval: 30s
                timeout: 10s
                retries: 3

            backend:
              image: $BACKEND_IMAGE
              container_name: event_backend
              restart: unless-stopped
              ports:
                - "5000:5000"
              environment:
                MONGO_URI: mongodb://admin:\${MONGO_ROOT_PASSWORD}@event_mongodb:27017/eventdb?authSource=admin
                SECRET_KEY: \${SECRET_KEY}
                FLASK_ENV: production
              depends_on:
                mongodb:
                  condition: service_healthy
              networks:
                - event_network

            frontend:
              image: $FRONTEND_IMAGE
              container_name: event_frontend
              restart: unless-stopped
              ports:
                - "8501:8501"
              environment:
                API_BASE_URL: http://event_backend:5000/api
              depends_on:
                - backend
              networks:
                - event_network

          volumes:
            mongodb_data:

          networks:
            event_network:
              driver: bridge
          COMPOSE

          echo "🔐 Writing .env file..."
          cat > ~/event-app/.env << ENV
          MONGO_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          ENV

          echo "🚀 Starting services..."
          cd ~/event-app
          docker-compose up -d

          echo "✅ Deployment done"
          docker ps
          EOF

      - name: Transfer and run deployment script on EC2
        run: |
          scp deploy.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/deploy.sh
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "bash /home/${{ secrets.EC2_USER }}/deploy.sh"
