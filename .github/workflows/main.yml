name: EventService CI/CD
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run tests
        run: |
          # Add your test commands here
          # docker-compose -f docker-compose.test.yml run --rm test
          echo "Running tests..."

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      image-tag: ${{ env.IMAGE_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build backend Docker image
        run: |
          cd backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/event-backend:latest .
          docker tag ${{ secrets.DOCKER_USERNAME }}/event-backend:latest ${{ secrets.DOCKER_USERNAME }}/event-backend:${{ github.sha }}
      - name: Build frontend Docker image
        run: |
          cd frontend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/event-frontend:latest .
          docker tag ${{ secrets.DOCKER_USERNAME }}/event-frontend:latest ${{ secrets.DOCKER_USERNAME }}/event-frontend:${{ github.sha }}
      - name: Push Docker images
        run: |
          # Push backend images
          docker push ${{ secrets.DOCKER_USERNAME }}/event-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/event-backend:${{ github.sha }}
          
          # Push frontend images
          docker push ${{ secrets.DOCKER_USERNAME }}/event-frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/event-frontend:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Copy docker-compose and env files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          source: "docker-compose.yml"
          target: "~/app/"
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          timeout: 300s
          script: |
            # Update system packages
            sudo yum update -y || sudo apt update -y
            
            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              sudo yum install -y docker || sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi
            
            # Install Docker Compose if not installed
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Navigate to app directory
            cd ~/app
            
            # Create production environment file
            cat > .env.prod << 'EOF'
            # Database Configuration
            MONGO_ROOT_USERNAME=admin
            MONGO_ROOT_PASSWORD=${{ secrets.MONGO_PASSWORD }}
            MONGO_DATABASE=eventdb
            
            # Application Configuration
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            FLASK_ENV=production
            
            # Docker Configuration
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            IMAGE_TAG=latest
            EOF
            
            # Stop existing containers
            docker-compose -f docker-compose.yml --env-file .env.prod down || true
            
            # Pull latest images
            docker pull mongo:7.0
            docker pull ${{ secrets.DOCKER_USERNAME }}/event-backend:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/event-frontend:latest
            
            # Start the application
            docker-compose -f docker-compose.yml --env-file .env.prod up -d
            
            # Wait for services to be ready
            echo "Waiting for services to start..."
            sleep 30
            
            # Health check
            for i in {1..10}; do
              if curl -f http://localhost:5000/api/health; then
                echo "Backend is healthy!"
                break
              else
                echo "Waiting for backend... (attempt $i/10)"
                sleep 10
              fi
            done
            
            # Clean up old images
            docker image prune -f
            
            # Show running containers
            docker ps
            
            echo "Deployment completed successfully!"